name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.23.1'
  APP_NAME: 'tgbot-skeleton'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61.0
        args: --timeout=3m
      env:
        GOTOOLCHAIN: go1.23.1

  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref_type == 'tag'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build all binaries
      run: |
        mkdir -p dist
        # Linux amd64
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/tgbot-skeleton-linux_amd64 ./cmd/bot
        # Linux arm64
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/tgbot-skeleton-linux_arm64 ./cmd/bot
        # Windows amd64
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/tgbot-skeleton-windows_amd64.exe ./cmd/bot
        # macOS amd64
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/tgbot-skeleton-darwin_amd64 ./cmd/bot
        # macOS arm64
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commit=${{ github.sha }}" -o dist/tgbot-skeleton-darwin_arm64 ./cmd/bot
        chmod +x dist/tgbot-skeleton-*
        ls -la dist/

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Upload to release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*
        body: |
          ## Telegram Bot Skeleton ${{ github.ref_name }}
          
          ### Downloads
          - `tgbot-skeleton-linux_amd64` - Linux x86_64
          - `tgbot-skeleton-linux_arm64` - Linux ARM64
          - `tgbot-skeleton-windows_amd64.exe` - Windows x86_64
          - `tgbot-skeleton-darwin_amd64` - macOS x86_64
          - `tgbot-skeleton-darwin_arm64` - macOS ARM64
          
          ### Installation
          1. Download the appropriate binary for your system
          2. Make it executable: `chmod +x tgbot-skeleton-linux_amd64`
          3. Create `.env` file with your configuration
          4. Run: `./tgbot-skeleton-linux_amd64`
          
          ### Checksums
          ```
          $(cat dist/checksums.txt)
          ```
        draft: false
        prerelease: false

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref_type == 'tag'
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd ${{ secrets.SERVER_PATH }}
          ./scripts/deploy.sh update