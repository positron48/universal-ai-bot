package bot

import (
	"context"

	"tgbot-skeleton/internal/ai"
	"tgbot-skeleton/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// Handler handles Telegram updates
type Handler struct {
	bot       *tgbotapi.BotAPI
	logger    *zap.Logger
	aiService *ai.Service
}

// NewHandler creates a new handler
func NewHandler(bot *tgbotapi.BotAPI, logger *zap.Logger, aiService *ai.Service) *Handler {
	return &Handler{
		bot:       bot,
		logger:    logger,
		aiService: aiService,
	}
}

// HandleUpdate handles incoming Telegram updates
func (h *Handler) HandleUpdate(ctx context.Context, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	message := update.Message
	h.logger.Info("received message",
		zap.Int64("chat_id", message.Chat.ID),
		zap.String("text", message.Text),
		zap.String("username", message.From.UserName),
	)

	// Handle commands
	if message.IsCommand() {
		h.handleCommand(ctx, message)
		return
	}

	// Handle regular messages
	h.handleMessage(ctx, message)
}

// handleCommand handles bot commands
func (h *Handler) handleCommand(ctx context.Context, message *tgbotapi.Message) {
	command := message.Command()
	chatID := message.Chat.ID

	h.logger.Info("handling command", zap.String("command", command))

	switch command {
	case "start":
		h.sendMessage(chatID, "üá¨üáß –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\nüìù –ß—Ç–æ —è —É–º–µ—é:\n‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ\n‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏\n\nüí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
	case "help":
		h.sendMessage(chatID, "üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:\n\nüî§ **–û–¥–Ω–æ —Å–ª–æ–≤–æ** ‚Üí –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–ª–æ–≤–∞ —Å:\n‚Ä¢ –ß–∞—Å—Ç—å—é —Ä–µ—á–∏\n‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π IPA\n‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n‚Ä¢ –ü—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n‚Ä¢ –§–æ—Ä–º–∞–º–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤\n\nüìù **–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç** ‚Üí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n‚Ä¢ –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ (–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è)\n‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è\n‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\nüá∑üá∫ **–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç** ‚Üí –ü–µ—Ä–µ–≤–æ–¥:\n‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—Ä–∞–∑\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞ –∏ —Å—Ç–∏–ª—è\n\nüí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ª–æ–≤–æ - —è —Å—Ä–∞–∑—É –ø–æ–º–æ–≥—É!")
	default:
		h.sendMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.")
	}
}

// handleMessage handles regular text messages
func (h *Handler) handleMessage(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	if text == "" {
		h.sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
		return
	}

	h.logger.Info("processing user message",
		zap.Int64("chat_id", chatID),
		zap.String("text", text),
	)

	// Send typing indicator
	h.sendTyping(chatID)

	// Get AI response
	response, err := h.aiService.GenerateResponse(ctx, text)
	if err != nil {
		h.logger.Error("failed to get AI response", zap.Error(err))
		h.sendMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// Convert Markdown to Telegram format and send AI response
	telegramResponse := utils.ConvertMarkdownToTelegram(response)
	h.sendMessage(chatID, telegramResponse)
}

// sendMessage sends a message to the specified chat
func (h *Handler) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown

	if _, err := h.bot.Send(msg); err != nil {
		h.logger.Error("failed to send message", zap.Error(err))
	}
}

// sendTyping sends a typing indicator to the specified chat
func (h *Handler) sendTyping(chatID int64) {
	action := tgbotapi.NewChatAction(chatID, tgbotapi.ChatTyping)
	if _, err := h.bot.Request(action); err != nil {
		h.logger.Error("failed to send typing indicator", zap.Error(err))
	}
}
